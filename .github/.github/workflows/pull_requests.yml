name: Pull Request Process

on:
  pull_request:
    paths:
      - .github/workflows/pull_requests.yml
      - alicloud/*.go

jobs:
#  formatter:
#    name: Go Format Check
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#        with:
#          fetch-depth: 0
#      - name: Golang Formatter
#        uses: Jerome1337/gofmt-action@v1.0.4
#        with:
#          gofmt-path: './alicloud'
#          gofmt-flags: '-l -d'
  formatter:
    name: Go Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - name: Set up Go Version
        uses: actions/setup-go@v2
        with:
          go-version: '1.19.3'

      - name: Get dependencies
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go mod tidy
      - name: Golang Formatter Check
        run: |
          if [[ $(git diff --name-only HEAD^ HEAD | grep -c "^alicloud/") -lt 1 ]]; then
            echo -e "\033[33m[WARNING]\033[0m there are no go files were changed, skipped."
            continue
          fi
          exitCode=0
          echo "==> Checking that code complies with gofmt and goimports requirements..."
          diffFiles=$(git diff --name-only HEAD^ HEAD | grep "^alicloud/")
          for fileName in ${diffFiles[@]};
          do
              goimpFile=$(goimports -l ${fileName})
              if [[ -n ${goimpFile} ]]; then
                goimports -d ${fileName}
                exitCode=1
              fi
              gofmtFile=$(gofmt -l ${fileName})
              if [[ -n ${gofmtFile} ]]; then
                gofmt -d ${fileName}
                exitCode=1
              fi
          done
          if [[ ${exitCode} -gt 0 ]]; then
              echo -e "\n\033[31m[Error]\033[0m==> gofmt or goimports needs running on the above files. You can use the command: \`make fmt\` to reformat code. \033[0m"
              exit 1
          fi
          echo -e "==> PASS"

      - name: vet
        run: |
          make vet

  labeler:
    runs-on: ubuntu-latest
    name: Label the PR size
    steps:
      - uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_max_size: '30'
          s_max_size: '60'
          m_max_size: '150'
          l_max_size: '1500'
          fail_if_xl: 'false'
          message_if_xl: >
            'This PR exceeds the recommended size of 1500 lines.
            Please make sure you are NOT addressing multiple issues with one PR.
            Note this PR might be rejected due to its size.â€™
name: Terrafrom Basic Test Process
on:
  pull_request:
    paths:
      - .github/workflows/acctest-terraform-basic.yml
      - alicloud/*.go
    branches:
      - master

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go Version
        uses: actions/setup-go@v2
        with:
          go-version: '1.19.3'

      - name: Get dependencies
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go mod tidy

      - name: fmtcheck
        run: |
          make fmtcheck

      - name: importscheck
        run: |
          make importscheck

      - name: vet
        run: |
          make vet

  CompatibilityCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.18.x'
      - uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - name: Attribute Compatibility Check
        run: |
          # diffFiles=$(git diff --name-only HEAD^ HEAD | grep "^alicloud/" | grep ".go$" | grep -v "_test.go$")
          diffFiles=$(git diff --name-only HEAD^ HEAD)
          echo $diffFiles > diff.out
          go test -v ./scripts/schema_test.go -run=TestFieldCompatibilityCheck -file_name="../diff.out"
          if [[ "$?" != "0" ]]; then
            echo -e "\033[31m Compatibility Error! Please check out the correct schema \033[0m"
            exit 1
          fi

  ConsistencyCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.18.x'
      - uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - name: Attribute Consistency Check
        run: |
          diffResourceNames=""
          # diffFiles=$(git diff --name-only HEAD^ HEAD | grep "^alicloud/" | grep ".go$" | grep -v "_test.go$")
          diffFiles=$(git diff --name-only HEAD^ HEAD)
          for fileName in ${diffFiles[@]};
          do
              # currently, the action does not support checking data source
              if [[ ${fileName} == alicloud/resource_* ]]; then
                  resourceName=$(echo ${fileName} | grep -Eo "alicloud_[0-9a-z_]*")
                  if [[ ${resourceName} == *_test ]]; then
                    continue
                  fi
                  diffResourceNames=$diffResourceNames";"${resourceName}
              fi
          done
          if [[ ${diffResourceNames} == "" ]]; then
              echo -e "\n\033[33m missing resource files and there is no need to checking Consistency. \033[0m"
              exit 0
          fi
          go test -v ./scripts/schema_test.go -run=TestConsistencyWithDocument -resourceNames="${diffResourceNames}"
          if [[ "$?" != "0" ]]; then
            echo -e "\033[31m Consistency Error! Please check out the correct schema or document \033[0m"
            exit 1
          fi

#  Approve: # First step
#    runs-on: ubuntu-latest
#    steps:
#      - name: Approve
#        run: echo For security reasons, all pull requests need to be approved first before running the integration test.
#
#  IntegrationTest:
#    runs-on: ubuntu-latest
#    needs: [Approve] # Require the first step to finish
#    environment: IntegrationTest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup Go
#        uses: actions/setup-go@v4
#        with:
#          go-version: '1.18.x'
#      - uses: ReeganExE/github-action-job-id@v1.0
#        with:
#          expose-name: true
#      - uses: jwalton/gh-find-current-pr@v1
#        id: findPr
#        with:
#          # Can be "open", "closed", or "all".  Defaults to "open".
#          state: open
#      - uses: actions/checkout@v3
#        with:
#          # Checkout as many commits as needed for the diff
#          fetch-depth: 2
#      - name: Files Diff Check
#        run: |
#          # diffFiles=$(git diff --name-only HEAD^ HEAD | grep "^alicloud/" | grep ".go$" | grep -v "_test.go$")
#          diffFiles=$(git diff --name-only HEAD^ HEAD)
#          noNeedRun=true
#          for fileName in ${diffFiles[@]};
#          do
#              echo -e "\n\033[37mchecking diff file $fileName ... \033[0m"
#              if [[ ${fileName} == "alicloud/resource_alicloud"* || ${fileName} == "alicloud/data_source_alicloud"* ]];then
#                  if [[ ${fileName} == *?_test.go ]]; then
#                      echo -e "\033[33m[SKIPPED]\033[0m skipping the file $fileName, continue..."
#                      continue
#                  fi
#                  noNeedRun=false
#                  fileName=(${fileName//\.go/_test\.go })
#                  checkFuncs=$(grep "func TestAcc.*" ${fileName})
#                  echo -e "found the test funcs:\n${checkFuncs}\n"
#                  funcs=(${checkFuncs//"(t *testing.T) {"/ })
#                  for func in ${funcs[@]};
#                  do
#                    if [[ ${func} != "TestAcc"* ]]; then
#                      continue
#                    fi
#                    DiffFuncNames=$DiffFuncNames";"${func}
#                  done
#              fi
#          done
#
#          if [[ "${noNeedRun}" = "false" && ${DiffFuncNames} == "" ]]; then
#              echo -e "\n\033[31m missing integration test cases, please add them. \033[0m"
#              exit 1
#          fi
#          echo "DIFF_FUNC_NAMES=$DiffFuncNames" >> $GITHUB_ENV
#          echo "NO_NEED_RUN=$noNeedRun" >> $GITHUB_ENV
#      - uses: montudor/action-zip@v1
#      - name: Zip The PR
#        run: |
#          if [[ "${{ env.NO_NEED_RUN }}" = "true" ]]; then
#              exit 0
#          fi
#          zip -qq -r terraform-provider-alicloud.zip .
#          IN=$GH_JOB_IntegrationTest_HTML_URL
#          arrIN=(${IN//actions/ })
#          ossObjectPath="github-actions/pull/"${{ steps.findPr.outputs.pr }}${arrIN[1]}
#          echo "OSS_OBJECT_PATH=$ossObjectPath" >> $GITHUB_ENV
#
#      - name: Upload To OSS
#        uses: tvrcgo/upload-to-oss@master
#        with:
#          key-id: ${{ secrets.ALICLOUD_ACCESS_KEY }}
#          key-secret: ${{ secrets.ALICLOUD_SECRET_KEY }}
#          region: oss-${{ secrets.BUCKET_REGION }}
#          bucket: ${{ secrets.BUCKET_NAME }}
#          assets: |
#            terraform-provider-alicloud.zip:${{ env.OSS_OBJECT_PATH }}/terraform-provider-alicloud.zip
#      - name: Run Integration Test
#        run: |
#          if [[ "${{ env.NO_NEED_RUN }}" = "true" ]]; then
#              exit 0
#          fi
#          go run scripts/integration.go ${{ secrets.ALICLOUD_ACCESS_KEY }} ${{ secrets.ALICLOUD_SECRET_KEY }} ${{ secrets.ALICLOUD_ACCOUNT_ID }} ${{ secrets.FC_SERVICE }} ${{ secrets.FC_REGION }} ${{ secrets.BUCKET_REGION }} ${{ secrets.BUCKET_NAME }} ${{ env.OSS_OBJECT_PATH }}

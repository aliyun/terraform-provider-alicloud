// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ots_filter.proto

/*
Package otsprotocol is a generated protocol buffer package.

It is generated from these files:
	ots_filter.proto
	table_store.proto

It has these top-level messages:
	SingleColumnValueFilter
	CompositeColumnValueFilter
	ColumnPaginationFilter
	Filter
	Error
	PrimaryKeySchema
	PartitionRange
	TableOptions
	TableMeta
	Condition
	CapacityUnit
	ReservedThroughputDetails
	ReservedThroughput
	ConsumedCapacity
	StreamSpecification
	StreamDetails
	CreateTableRequest
	CreateTableResponse
	UpdateTableRequest
	UpdateTableResponse
	DescribeTableRequest
	DescribeTableResponse
	ListTableRequest
	ListTableResponse
	DeleteTableRequest
	DeleteTableResponse
	LoadTableRequest
	LoadTableResponse
	UnloadTableRequest
	UnloadTableResponse
	TimeRange
	ReturnContent
	GetRowRequest
	GetRowResponse
	UpdateRowRequest
	UpdateRowResponse
	PutRowRequest
	PutRowResponse
	DeleteRowRequest
	DeleteRowResponse
	TableInBatchGetRowRequest
	BatchGetRowRequest
	RowInBatchGetRowResponse
	TableInBatchGetRowResponse
	BatchGetRowResponse
	RowInBatchWriteRowRequest
	TableInBatchWriteRowRequest
	BatchWriteRowRequest
	RowInBatchWriteRowResponse
	TableInBatchWriteRowResponse
	BatchWriteRowResponse
	GetRangeRequest
	GetRangeResponse
	ListStreamRequest
	Stream
	ListStreamResponse
	StreamShard
	DescribeStreamRequest
	DescribeStreamResponse
	GetShardIteratorRequest
	GetShardIteratorResponse
	GetStreamRecordRequest
	GetStreamRecordResponse
	ComputeSplitPointsBySizeRequest
	ComputeSplitPointsBySizeResponse
*/
package otsprotocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FilterType int32

const (
	FilterType_FT_SINGLE_COLUMN_VALUE    FilterType = 1
	FilterType_FT_COMPOSITE_COLUMN_VALUE FilterType = 2
	FilterType_FT_COLUMN_PAGINATION      FilterType = 3
)

var FilterType_name = map[int32]string{
	1: "FT_SINGLE_COLUMN_VALUE",
	2: "FT_COMPOSITE_COLUMN_VALUE",
	3: "FT_COLUMN_PAGINATION",
}
var FilterType_value = map[string]int32{
	"FT_SINGLE_COLUMN_VALUE":    1,
	"FT_COMPOSITE_COLUMN_VALUE": 2,
	"FT_COLUMN_PAGINATION":      3,
}

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}
func (x FilterType) String() string {
	return proto.EnumName(FilterType_name, int32(x))
}
func (x *FilterType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FilterType_value, data, "FilterType")
	if err != nil {
		return err
	}
	*x = FilterType(value)
	return nil
}
func (FilterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ComparatorType int32

const (
	ComparatorType_CT_EQUAL         ComparatorType = 1
	ComparatorType_CT_NOT_EQUAL     ComparatorType = 2
	ComparatorType_CT_GREATER_THAN  ComparatorType = 3
	ComparatorType_CT_GREATER_EQUAL ComparatorType = 4
	ComparatorType_CT_LESS_THAN     ComparatorType = 5
	ComparatorType_CT_LESS_EQUAL    ComparatorType = 6
)

var ComparatorType_name = map[int32]string{
	1: "CT_EQUAL",
	2: "CT_NOT_EQUAL",
	3: "CT_GREATER_THAN",
	4: "CT_GREATER_EQUAL",
	5: "CT_LESS_THAN",
	6: "CT_LESS_EQUAL",
}
var ComparatorType_value = map[string]int32{
	"CT_EQUAL":         1,
	"CT_NOT_EQUAL":     2,
	"CT_GREATER_THAN":  3,
	"CT_GREATER_EQUAL": 4,
	"CT_LESS_THAN":     5,
	"CT_LESS_EQUAL":    6,
}

func (x ComparatorType) Enum() *ComparatorType {
	p := new(ComparatorType)
	*p = x
	return p
}
func (x ComparatorType) String() string {
	return proto.EnumName(ComparatorType_name, int32(x))
}
func (x *ComparatorType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ComparatorType_value, data, "ComparatorType")
	if err != nil {
		return err
	}
	*x = ComparatorType(value)
	return nil
}
func (ComparatorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LogicalOperator int32

const (
	LogicalOperator_LO_NOT LogicalOperator = 1
	LogicalOperator_LO_AND LogicalOperator = 2
	LogicalOperator_LO_OR  LogicalOperator = 3
)

var LogicalOperator_name = map[int32]string{
	1: "LO_NOT",
	2: "LO_AND",
	3: "LO_OR",
}
var LogicalOperator_value = map[string]int32{
	"LO_NOT": 1,
	"LO_AND": 2,
	"LO_OR":  3,
}

func (x LogicalOperator) Enum() *LogicalOperator {
	p := new(LogicalOperator)
	*p = x
	return p
}
func (x LogicalOperator) String() string {
	return proto.EnumName(LogicalOperator_name, int32(x))
}
func (x *LogicalOperator) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LogicalOperator_value, data, "LogicalOperator")
	if err != nil {
		return err
	}
	*x = LogicalOperator(value)
	return nil
}
func (LogicalOperator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SingleColumnValueFilter struct {
	Comparator        *ComparatorType `protobuf:"varint,1,req,name=comparator,enum=otsprotocol.ComparatorType" json:"comparator,omitempty"`
	ColumnName        *string         `protobuf:"bytes,2,req,name=column_name,json=columnName" json:"column_name,omitempty"`
	ColumnValue       []byte          `protobuf:"bytes,3,req,name=column_value,json=columnValue" json:"column_value,omitempty"`
	FilterIfMissing   *bool           `protobuf:"varint,4,req,name=filter_if_missing,json=filterIfMissing" json:"filter_if_missing,omitempty"`
	LatestVersionOnly *bool           `protobuf:"varint,5,req,name=latest_version_only,json=latestVersionOnly" json:"latest_version_only,omitempty"`
	XXX_unrecognized  []byte          `json:"-"`
}

func (m *SingleColumnValueFilter) Reset()                    { *m = SingleColumnValueFilter{} }
func (m *SingleColumnValueFilter) String() string            { return proto.CompactTextString(m) }
func (*SingleColumnValueFilter) ProtoMessage()               {}
func (*SingleColumnValueFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SingleColumnValueFilter) GetComparator() ComparatorType {
	if m != nil && m.Comparator != nil {
		return *m.Comparator
	}
	return ComparatorType_CT_EQUAL
}

func (m *SingleColumnValueFilter) GetColumnName() string {
	if m != nil && m.ColumnName != nil {
		return *m.ColumnName
	}
	return ""
}

func (m *SingleColumnValueFilter) GetColumnValue() []byte {
	if m != nil {
		return m.ColumnValue
	}
	return nil
}

func (m *SingleColumnValueFilter) GetFilterIfMissing() bool {
	if m != nil && m.FilterIfMissing != nil {
		return *m.FilterIfMissing
	}
	return false
}

func (m *SingleColumnValueFilter) GetLatestVersionOnly() bool {
	if m != nil && m.LatestVersionOnly != nil {
		return *m.LatestVersionOnly
	}
	return false
}

type CompositeColumnValueFilter struct {
	Combinator       *LogicalOperator `protobuf:"varint,1,req,name=combinator,enum=otsprotocol.LogicalOperator" json:"combinator,omitempty"`
	SubFilters       []*Filter        `protobuf:"bytes,2,rep,name=sub_filters,json=subFilters" json:"sub_filters,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *CompositeColumnValueFilter) Reset()                    { *m = CompositeColumnValueFilter{} }
func (m *CompositeColumnValueFilter) String() string            { return proto.CompactTextString(m) }
func (*CompositeColumnValueFilter) ProtoMessage()               {}
func (*CompositeColumnValueFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CompositeColumnValueFilter) GetCombinator() LogicalOperator {
	if m != nil && m.Combinator != nil {
		return *m.Combinator
	}
	return LogicalOperator_LO_NOT
}

func (m *CompositeColumnValueFilter) GetSubFilters() []*Filter {
	if m != nil {
		return m.SubFilters
	}
	return nil
}

type ColumnPaginationFilter struct {
	Offset           *int32 `protobuf:"varint,1,req,name=offset" json:"offset,omitempty"`
	Limit            *int32 `protobuf:"varint,2,req,name=limit" json:"limit,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ColumnPaginationFilter) Reset()                    { *m = ColumnPaginationFilter{} }
func (m *ColumnPaginationFilter) String() string            { return proto.CompactTextString(m) }
func (*ColumnPaginationFilter) ProtoMessage()               {}
func (*ColumnPaginationFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ColumnPaginationFilter) GetOffset() int32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *ColumnPaginationFilter) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

type Filter struct {
	Type             *FilterType `protobuf:"varint,1,req,name=type,enum=otsprotocol.FilterType" json:"type,omitempty"`
	Filter           []byte      `protobuf:"bytes,2,req,name=filter" json:"filter,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Filter) GetType() FilterType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return FilterType_FT_SINGLE_COLUMN_VALUE
}

func (m *Filter) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

func init() {
	proto.RegisterType((*SingleColumnValueFilter)(nil), "otsprotocol.SingleColumnValueFilter")
	proto.RegisterType((*CompositeColumnValueFilter)(nil), "otsprotocol.CompositeColumnValueFilter")
	proto.RegisterType((*ColumnPaginationFilter)(nil), "otsprotocol.ColumnPaginationFilter")
	proto.RegisterType((*Filter)(nil), "otsprotocol.Filter")
	proto.RegisterEnum("otsprotocol.FilterType", FilterType_name, FilterType_value)
	proto.RegisterEnum("otsprotocol.ComparatorType", ComparatorType_name, ComparatorType_value)
	proto.RegisterEnum("otsprotocol.LogicalOperator", LogicalOperator_name, LogicalOperator_value)
}

func init() { proto.RegisterFile("ots_filter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x8f, 0xda, 0x3e,
	0x10, 0xc5, 0x95, 0x40, 0xd0, 0xee, 0xc0, 0x7f, 0x09, 0x06, 0xb1, 0xf9, 0x6f, 0x5b, 0x95, 0x72,
	0x42, 0x54, 0xe2, 0xb0, 0xda, 0x5b, 0x7b, 0x89, 0xd2, 0x40, 0x91, 0x42, 0x42, 0x4d, 0xe0, 0x6a,
	0x05, 0x64, 0x90, 0xa5, 0x24, 0x46, 0xd8, 0xac, 0xc4, 0xad, 0x1f, 0xa1, 0x9f, 0xb6, 0xe7, 0x2a,
	0x76, 0xb6, 0x0d, 0xab, 0xbd, 0xd9, 0xef, 0xfd, 0x66, 0xe6, 0x4d, 0x1c, 0xb0, 0xb9, 0x14, 0x64,
	0xcf, 0x52, 0x49, 0x4f, 0x93, 0xe3, 0x89, 0x4b, 0x8e, 0x9a, 0x5c, 0x0a, 0x75, 0xda, 0xf1, 0x74,
	0xf8, 0xdb, 0x80, 0xfb, 0x15, 0xcb, 0x0f, 0x29, 0xf5, 0x78, 0x7a, 0xce, 0xf2, 0x4d, 0x92, 0x9e,
	0xe9, 0x54, 0xe1, 0xe8, 0x0b, 0xc0, 0x8e, 0x67, 0xc7, 0xe4, 0x94, 0x48, 0x7e, 0x72, 0x8c, 0x81,
	0x39, 0xba, 0x7b, 0x7c, 0x37, 0xa9, 0x54, 0x4f, 0xbc, 0xbf, 0x76, 0x7c, 0x39, 0x52, 0x5c, 0xc1,
	0xd1, 0x47, 0x68, 0xee, 0x54, 0x47, 0x92, 0x27, 0x19, 0x75, 0xcc, 0x81, 0x39, 0xba, 0x2d, 0x80,
	0x42, 0x0a, 0x93, 0x8c, 0xa2, 0x4f, 0xd0, 0x2a, 0x81, 0xe7, 0x62, 0xa6, 0x53, 0x1b, 0x98, 0xa3,
	0x16, 0x2e, 0x8b, 0x54, 0x0c, 0x34, 0x86, 0x8e, 0x4e, 0x4e, 0xd8, 0x9e, 0x64, 0x4c, 0x08, 0x96,
	0x1f, 0x9c, 0xfa, 0xc0, 0x1c, 0xdd, 0xe0, 0xb6, 0x36, 0xe6, 0xfb, 0x85, 0x96, 0xd1, 0x04, 0xba,
	0x69, 0x22, 0xa9, 0x90, 0xe4, 0x99, 0x9e, 0x04, 0xe3, 0x39, 0xe1, 0x79, 0x7a, 0x71, 0x2c, 0x45,
	0x77, 0xb4, 0xb5, 0xd1, 0x4e, 0x94, 0xa7, 0x97, 0xe1, 0x2f, 0x03, 0x1e, 0x8a, 0xf8, 0x5c, 0x30,
	0xf9, 0xc6, 0xee, 0x5f, 0xd5, 0xee, 0x5b, 0x96, 0x57, 0x76, 0x7f, 0x7f, 0xb5, 0x7b, 0xc0, 0x0f,
	0x6c, 0x97, 0xa4, 0xd1, 0x91, 0xaa, 0x85, 0x71, 0x85, 0x47, 0x4f, 0xd0, 0x14, 0xe7, 0x6d, 0xf9,
	0xd9, 0x85, 0x63, 0x0e, 0x6a, 0xa3, 0xe6, 0x63, 0xf7, 0xaa, 0x5c, 0xcf, 0xc1, 0x20, 0xce, 0x5b,
	0x7d, 0x14, 0xc3, 0x29, 0xf4, 0x75, 0x90, 0x65, 0x72, 0x28, 0x1a, 0x31, 0x9e, 0x97, 0x69, 0xfa,
	0xd0, 0xe0, 0xfb, 0xbd, 0xa0, 0x52, 0x25, 0xb1, 0x70, 0x79, 0x43, 0x3d, 0xb0, 0x52, 0x96, 0x31,
	0xa9, 0x3e, 0xaf, 0x85, 0xf5, 0x65, 0xb8, 0x80, 0x46, 0x59, 0xf7, 0x19, 0xea, 0xf2, 0x72, 0xa4,
	0x65, 0xfe, 0xfb, 0x37, 0x02, 0xa8, 0x77, 0x53, 0x50, 0x31, 0x44, 0x07, 0x56, 0xdd, 0x5a, 0xb8,
	0xbc, 0x8d, 0x13, 0x80, 0x7f, 0x2c, 0x7a, 0x80, 0xfe, 0x34, 0x26, 0xab, 0x79, 0x38, 0x0b, 0x7c,
	0xe2, 0x45, 0xc1, 0x7a, 0x11, 0x92, 0x8d, 0x1b, 0xac, 0x7d, 0xdb, 0x40, 0x1f, 0xe0, 0xff, 0x69,
	0x4c, 0xbc, 0x68, 0xb1, 0x8c, 0x56, 0xf3, 0xf8, 0x95, 0x6d, 0x22, 0x07, 0x7a, 0xca, 0x56, 0xe2,
	0xd2, 0x9d, 0xcd, 0x43, 0x37, 0x9e, 0x47, 0xa1, 0x5d, 0x1b, 0xff, 0x34, 0xe0, 0xee, 0xfa, 0x5f,
	0x42, 0x2d, 0xb8, 0xf1, 0x62, 0xe2, 0xff, 0x58, 0xbb, 0x81, 0x6d, 0x20, 0x1b, 0x5a, 0x5e, 0x4c,
	0xc2, 0xe8, 0x45, 0x31, 0x51, 0x17, 0xda, 0x5e, 0x4c, 0x66, 0xd8, 0x77, 0x63, 0x1f, 0x93, 0xf8,
	0xbb, 0x1b, 0xda, 0x35, 0xd4, 0x03, 0xbb, 0x22, 0x6a, 0xb4, 0x5e, 0x16, 0x07, 0xfe, 0x6a, 0xa5,
	0x39, 0x0b, 0x75, 0xe0, 0xbf, 0x17, 0x45, 0x43, 0x8d, 0xf1, 0x13, 0xb4, 0x5f, 0xbd, 0x28, 0x02,
	0x68, 0x04, 0x51, 0x31, 0xd4, 0x36, 0xca, 0xb3, 0x1b, 0x7e, 0xb3, 0x4d, 0x74, 0x0b, 0x56, 0x10,
	0x91, 0x08, 0xdb, 0xb5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x84, 0xe9, 0x46, 0x5e, 0x03,
	0x00, 0x00,
}

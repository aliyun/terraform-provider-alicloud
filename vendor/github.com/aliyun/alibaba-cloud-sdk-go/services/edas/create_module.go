package edas

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateModule invokes the edas.CreateModule API synchronously
func (client *Client) CreateModule(request *CreateModuleRequest) (response *CreateModuleResponse, err error) {
	response = CreateCreateModuleResponse()
	err = client.DoAction(request, response)
	return
}

// CreateModuleWithChan invokes the edas.CreateModule API asynchronously
func (client *Client) CreateModuleWithChan(request *CreateModuleRequest) (<-chan *CreateModuleResponse, <-chan error) {
	responseChan := make(chan *CreateModuleResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateModule(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateModuleWithCallback invokes the edas.CreateModule API asynchronously
func (client *Client) CreateModuleWithCallback(request *CreateModuleRequest, callback func(response *CreateModuleResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateModuleResponse
		var err error
		defer close(result)
		response, err = client.CreateModule(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateModuleRequest is the request struct for api CreateModule
type CreateModuleRequest struct {
	*requests.RoaRequest
	Values     string `position:"Body" name:"Values"`
	ModuleName string `position:"Query" name:"ModuleName"`
	ClusterId  string `position:"Query" name:"ClusterId"`
}

// CreateModuleResponse is the response struct for api CreateModule
type CreateModuleResponse struct {
	*responses.BaseResponse
	Code      int    `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	RequestId string `json:"RequestId" xml:"RequestId"`
	Result    string `json:"Result" xml:"Result"`
}

// CreateCreateModuleRequest creates a request to invoke CreateModule API
func CreateCreateModuleRequest() (request *CreateModuleRequest) {
	request = &CreateModuleRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("Edas", "2017-08-01", "CreateModule", "/pop/v5/oam/feature/module_actions", "edas", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateModuleResponse creates a response to parse from CreateModule response
func CreateCreateModuleResponse() (response *CreateModuleResponse) {
	response = &CreateModuleResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}

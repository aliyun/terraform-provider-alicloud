package cms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// NodeProcessCreate invokes the cms.NodeProcessCreate API synchronously
// api document: https://help.aliyun.com/api/cms/nodeprocesscreate.html
func (client *Client) NodeProcessCreate(request *NodeProcessCreateRequest) (response *NodeProcessCreateResponse, err error) {
	response = CreateNodeProcessCreateResponse()
	err = client.DoAction(request, response)
	return
}

// NodeProcessCreateWithChan invokes the cms.NodeProcessCreate API asynchronously
// api document: https://help.aliyun.com/api/cms/nodeprocesscreate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) NodeProcessCreateWithChan(request *NodeProcessCreateRequest) (<-chan *NodeProcessCreateResponse, <-chan error) {
	responseChan := make(chan *NodeProcessCreateResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.NodeProcessCreate(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// NodeProcessCreateWithCallback invokes the cms.NodeProcessCreate API asynchronously
// api document: https://help.aliyun.com/api/cms/nodeprocesscreate.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) NodeProcessCreateWithCallback(request *NodeProcessCreateRequest, callback func(response *NodeProcessCreateResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *NodeProcessCreateResponse
		var err error
		defer close(result)
		response, err = client.NodeProcessCreate(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// NodeProcessCreateRequest is the request struct for api NodeProcessCreate
type NodeProcessCreateRequest struct {
	*requests.RpcRequest
	InstanceId  string `position:"Query" name:"InstanceId"`
	ProcessName string `position:"Query" name:"ProcessName"`
	Name        string `position:"Query" name:"Name"`
	ProcessUser string `position:"Query" name:"ProcessUser"`
	Command     string `position:"Query" name:"Command"`
}

// NodeProcessCreateResponse is the response struct for api NodeProcessCreate
type NodeProcessCreateResponse struct {
	*responses.BaseResponse
	ErrorCode    int    `json:"ErrorCode" xml:"ErrorCode"`
	ErrorMessage string `json:"ErrorMessage" xml:"ErrorMessage"`
	Success      bool   `json:"Success" xml:"Success"`
	RequestId    string `json:"RequestId" xml:"RequestId"`
	Id           int    `json:"Id" xml:"Id"`
}

// CreateNodeProcessCreateRequest creates a request to invoke NodeProcessCreate API
func CreateNodeProcessCreateRequest() (request *NodeProcessCreateRequest) {
	request = &NodeProcessCreateRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cms", "2018-03-08", "NodeProcessCreate", "cms", "openAPI")
	return
}

// CreateNodeProcessCreateResponse creates a response to parse from NodeProcessCreate response
func CreateNodeProcessCreateResponse() (response *NodeProcessCreateResponse) {
	response = &NodeProcessCreateResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}

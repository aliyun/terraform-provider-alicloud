package cms

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeFolderList invokes the cms.DescribeFolderList API synchronously
// api document: https://help.aliyun.com/api/cms/describefolderlist.html
func (client *Client) DescribeFolderList(request *DescribeFolderListRequest) (response *DescribeFolderListResponse, err error) {
	response = CreateDescribeFolderListResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeFolderListWithChan invokes the cms.DescribeFolderList API asynchronously
// api document: https://help.aliyun.com/api/cms/describefolderlist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeFolderListWithChan(request *DescribeFolderListRequest) (<-chan *DescribeFolderListResponse, <-chan error) {
	responseChan := make(chan *DescribeFolderListResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeFolderList(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeFolderListWithCallback invokes the cms.DescribeFolderList API asynchronously
// api document: https://help.aliyun.com/api/cms/describefolderlist.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DescribeFolderListWithCallback(request *DescribeFolderListRequest, callback func(response *DescribeFolderListResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeFolderListResponse
		var err error
		defer close(result)
		response, err = client.DescribeFolderList(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeFolderListRequest is the request struct for api DescribeFolderList
type DescribeFolderListRequest struct {
	*requests.RpcRequest
	AppName string `position:"Query" name:"AppName"`
}

// DescribeFolderListResponse is the response struct for api DescribeFolderList
type DescribeFolderListResponse struct {
	*responses.BaseResponse
	RequestId  string   `json:"RequestId" xml:"RequestId"`
	Success    bool     `json:"Success" xml:"Success"`
	Code       int      `json:"Code" xml:"Code"`
	Message    string   `json:"Message" xml:"Message"`
	PageNumber int      `json:"PageNumber" xml:"PageNumber"`
	PageSize   int      `json:"PageSize" xml:"PageSize"`
	Total      int      `json:"Total" xml:"Total"`
	Resource   Resource `json:"Resource" xml:"Resource"`
}

// CreateDescribeFolderListRequest creates a request to invoke DescribeFolderList API
func CreateDescribeFolderListRequest() (request *DescribeFolderListRequest) {
	request = &DescribeFolderListRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Cms", "2019-01-01", "DescribeFolderList", "cms", "openAPI")
	request.Method = requests.GET
	return
}

// CreateDescribeFolderListResponse creates a response to parse from DescribeFolderList response
func CreateDescribeFolderListResponse() (response *DescribeFolderListResponse) {
	response = &DescribeFolderListResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}

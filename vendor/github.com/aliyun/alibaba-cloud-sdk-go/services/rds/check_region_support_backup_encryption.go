package rds

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CheckRegionSupportBackupEncryption invokes the rds.CheckRegionSupportBackupEncryption API synchronously
func (client *Client) CheckRegionSupportBackupEncryption(request *CheckRegionSupportBackupEncryptionRequest) (response *CheckRegionSupportBackupEncryptionResponse, err error) {
	response = CreateCheckRegionSupportBackupEncryptionResponse()
	err = client.DoAction(request, response)
	return
}

// CheckRegionSupportBackupEncryptionWithChan invokes the rds.CheckRegionSupportBackupEncryption API asynchronously
func (client *Client) CheckRegionSupportBackupEncryptionWithChan(request *CheckRegionSupportBackupEncryptionRequest) (<-chan *CheckRegionSupportBackupEncryptionResponse, <-chan error) {
	responseChan := make(chan *CheckRegionSupportBackupEncryptionResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CheckRegionSupportBackupEncryption(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CheckRegionSupportBackupEncryptionWithCallback invokes the rds.CheckRegionSupportBackupEncryption API asynchronously
func (client *Client) CheckRegionSupportBackupEncryptionWithCallback(request *CheckRegionSupportBackupEncryptionRequest, callback func(response *CheckRegionSupportBackupEncryptionResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CheckRegionSupportBackupEncryptionResponse
		var err error
		defer close(result)
		response, err = client.CheckRegionSupportBackupEncryption(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CheckRegionSupportBackupEncryptionRequest is the request struct for api CheckRegionSupportBackupEncryption
type CheckRegionSupportBackupEncryptionRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	DBInstanceID         string           `position:"Query" name:"DBInstanceID"`
}

// CheckRegionSupportBackupEncryptionResponse is the response struct for api CheckRegionSupportBackupEncryption
type CheckRegionSupportBackupEncryptionResponse struct {
	*responses.BaseResponse
	RequestId               string `json:"RequestId" xml:"RequestId"`
	SupportBackupEncryption bool   `json:"SupportBackupEncryption" xml:"SupportBackupEncryption"`
}

// CreateCheckRegionSupportBackupEncryptionRequest creates a request to invoke CheckRegionSupportBackupEncryption API
func CreateCheckRegionSupportBackupEncryptionRequest() (request *CheckRegionSupportBackupEncryptionRequest) {
	request = &CheckRegionSupportBackupEncryptionRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Rds", "2014-08-15", "CheckRegionSupportBackupEncryption", "rds", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCheckRegionSupportBackupEncryptionResponse creates a response to parse from CheckRegionSupportBackupEncryption response
func CreateCheckRegionSupportBackupEncryptionResponse() (response *CheckRegionSupportBackupEncryptionResponse) {
	response = &CheckRegionSupportBackupEncryptionResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}

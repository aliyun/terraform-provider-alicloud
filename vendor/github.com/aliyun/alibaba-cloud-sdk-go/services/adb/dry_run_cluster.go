package adb

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DryRunCluster invokes the adb.DryRunCluster API synchronously
func (client *Client) DryRunCluster(request *DryRunClusterRequest) (response *DryRunClusterResponse, err error) {
	response = CreateDryRunClusterResponse()
	err = client.DoAction(request, response)
	return
}

// DryRunClusterWithChan invokes the adb.DryRunCluster API asynchronously
func (client *Client) DryRunClusterWithChan(request *DryRunClusterRequest) (<-chan *DryRunClusterResponse, <-chan error) {
	responseChan := make(chan *DryRunClusterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DryRunCluster(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DryRunClusterWithCallback invokes the adb.DryRunCluster API asynchronously
func (client *Client) DryRunClusterWithCallback(request *DryRunClusterRequest, callback func(response *DryRunClusterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DryRunClusterResponse
		var err error
		defer close(result)
		response, err = client.DryRunCluster(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DryRunClusterRequest is the request struct for api DryRunCluster
type DryRunClusterRequest struct {
	*requests.RpcRequest
	DBClusterDescription      string           `position:"Query" name:"DBClusterDescription"`
	EnableDefaultResourcePool requests.Boolean `position:"Query" name:"EnableDefaultResourcePool"`
	StorageResource           string           `position:"Query" name:"StorageResource"`
	DBClusterNetworkType      string           `position:"Query" name:"DBClusterNetworkType"`
	Period                    string           `position:"Query" name:"Period"`
	DBClusterId               string           `position:"Query" name:"DBClusterId"`
	DBClusterVersion          string           `position:"Query" name:"DBClusterVersion"`
	UsedTime                  string           `position:"Query" name:"UsedTime"`
	VSwitchId                 string           `position:"Query" name:"VSwitchId"`
	VPCId                     string           `position:"Query" name:"VPCId"`
	ZoneId                    string           `position:"Query" name:"ZoneId"`
	ComputeResource           string           `position:"Query" name:"ComputeResource"`
	PayType                   string           `position:"Query" name:"PayType"`
	Operation                 string           `position:"Query" name:"Operation"`
}

// DryRunClusterResponse is the response struct for api DryRunCluster
type DryRunClusterResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
}

// CreateDryRunClusterRequest creates a request to invoke DryRunCluster API
func CreateDryRunClusterRequest() (request *DryRunClusterRequest) {
	request = &DryRunClusterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("adb", "2019-03-15", "DryRunCluster", "ads", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDryRunClusterResponse creates a response to parse from DryRunCluster response
func CreateDryRunClusterResponse() (response *DryRunClusterResponse) {
	response = &DryRunClusterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
